(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CustomImage = exports.CustomImage = function () {
  function CustomImage(filepath) {
    var _this = this;

    _classCallCheck(this, CustomImage);

    this._image = new Image();
    this._image.onload = function () {
      _this._loaded = true;
    };
    this._image.src = filepath;
  }

  _createClass(CustomImage, [{
    key: "inBoundingBox",
    value: function inBoundingBox(x, y) {
      return x >= this.updatedXpos && x <= this.updatedXpos + this.width && y >= this.updatedYpos && y <= this.updatedYpos + this.height;
    }
  }, {
    key: "xPos",
    set: function set(xPos) {
      this._xpos = xPos;
    },
    get: function get() {
      return this._xpos;
    }
  }, {
    key: "yPos",
    set: function set(yPos) {
      this._ypos = yPos;
    },
    get: function get() {
      return this._ypos;
    }
  }, {
    key: "image",
    get: function get() {
      return this._image;
    }
  }, {
    key: "didload",
    get: function get() {
      return this._loaded;
    }
  }, {
    key: "width",
    get: function get() {
      return this._image.width;
    }
  }, {
    key: "height",
    get: function get() {
      return this._image.height;
    }
  }, {
    key: "updatedXpos",
    get: function get() {
      return this._updatedXpos;
    },
    set: function set(xpos) {
      this._updatedXpos = xpos;
    }
  }, {
    key: "updatedYpos",
    get: function get() {
      return this._updatedYpos;
    },
    set: function set(ypos) {
      this._updatedYpos = ypos;
    }
  }, {
    key: "midpointX",
    get: function get() {
      return this._image.width / 2 + this.xPos;
    }
  }, {
    key: "bottomPart",
    get: function get() {
      return this._image.height + this.yPos;
    }
  }]);

  return CustomImage;
}();

},{}],2:[function(require,module,exports){
'use strict';

var _image = require('./customImage/image.js');

var backgroundCanvas = document.getElementById('background');
var dynamicCanvas = document.getElementById('dynamic');
var dynamicContext = dynamicCanvas.getContext('2d');
var backgroundContext = backgroundCanvas.getContext('2d');

backgroundCanvas.width = window.innerWidth;
backgroundCanvas.height = window.innerHeight;

dynamicCanvas.width = window.innerWidth;
dynamicCanvas.height = window.innerHeight;

var minuteHandDegree = 6;
var hourHandDegree = 0.5;
var degPerHour = 30;

var minuteHandxPos, minuteHandyPos, hourHandxPos, hourHandyPos;
var inleftQuadrant = false;
var inrightQuadrant = false;

var mousePositionX = 0;
var mousePositionY = 0;
var hourHandAngle = 0;
var angle = 0;
var movingAngle = 0;
var minutes = 0;
var hours = 12;

var reqFrame;
var hourcount = 0;

var images = {
  background: new _image.CustomImage("./assets/static/background.jpg"),
  wristWatch: new _image.CustomImage("./assets/static/clockresized.png"),
  minuteHand: new _image.CustomImage("./assets/dynamic/hands/minutehandresized.png"),
  hourHand: new _image.CustomImage("./assets/dynamic/hands/hourhandresized.png"),
  digitalWatch: new _image.CustomImage("./assets/static/digital_times_resized.png")
};

var imageloadObserver;

//Check that all images have loaded
function checkIfloaded() {
  var imagesLoaded = 0;
  var numImages = 0;

  for (var image in images) {
    numImages++;
  }

  for (var image in images) {
    if (images[image].didload) {

      imagesLoaded++;
    }
  }
  if (imagesLoaded >= numImages) {

    clearInterval(imageloadObserver);
    setParameters();
  }
}

/**
 * Sets all the parameters. The background is static and starts from the origin.
 * The analogue clock is placed 1/4 of the screen from the left. All the other objects are relative to the
 * analogue clock. 
 */
function setParameters() {

  images.background.xPos = 0;
  images.background.yPos = 0;
  images.wristWatch.xPos = backgroundCanvas.width / 4 - images.wristWatch.width;
  images.wristWatch.yPos = backgroundCanvas.height / 4;
  images.minuteHand.xPos = images.wristWatch.midpointX - images.minuteHand.width / 2;
  images.minuteHand.yPos = dynamicCanvas.height / 4 + images.wristWatch.height / 2 - images.minuteHand.height;
  images.hourHand.xPos = images.wristWatch.xPos + images.wristWatch.width / 2 - images.hourHand.width / 2;
  images.hourHand.yPos = images.wristWatch.yPos + images.wristWatch.height / 2 - images.hourHand.height;
  images.digitalWatch.xPos = backgroundCanvas.width * 3 / 4 - images.digitalWatch.width;
  images.digitalWatch.yPos = images.wristWatch.height / 2 + backgroundCanvas.height / 4 - images.digitalWatch.height / 2;
  images.minuteHand.updatedXpos = images.minuteHand.xPos;
  images.minuteHand.updatedYpos = images.minuteHand.yPos;
  hourHandxPos = images.digitalWatch.xPos + images.digitalWatch.width / 8;
  hourHandyPos = images.digitalWatch.yPos + images.digitalWatch.height / 2;
  images.hourHand.updatedXpos = images.hourHand.xPos;
  images.hourHand.updatedYpos = images.hourHand.yPos;
  minuteHandxPos = hourHandxPos + images.digitalWatch.width * 3 / 8;
  minuteHandyPos = hourHandyPos;
  draw();
  setListeners();
}

//Draw the images at the set positions
function draw() {
  backgroundContext.drawImage(images.background.image, images.background.xPos, images.background.yPos);
  backgroundContext.drawImage(images.wristWatch.image, images.wristWatch.xPos, images.wristWatch.yPos);
  backgroundContext.drawImage(images.digitalWatch.image, images.digitalWatch.xPos, images.digitalWatch.yPos);
  dynamicContext.drawImage(images.minuteHand.image, images.minuteHand.xPos, images.minuteHand.yPos);
  dynamicContext.drawImage(images.hourHand.image, images.minuteHand.xPos, images.hourHand.yPos);
  dynamicContext.font = '50pt verdana, sans-serif';
  dynamicContext.fillStyle = "#FFFFFF";
  backgroundContext.font = dynamicContext.font;
  backgroundContext.fillStyle = dynamicContext.fillStyle;
  dynamicContext.fillText("12", hourHandxPos, hourHandyPos);
  backgroundContext.fillText(":", hourHandxPos + 2 * images.digitalWatch.width / 8, hourHandyPos - 5);
  dynamicContext.fillText("00", minuteHandxPos, minuteHandyPos);
}

function setListeners() {
  /*
    * When mouse is pressed. Check if the mouse is in the bounding box of either the hourhand or the minutehand
    * and call the respective function.
    */
  dynamicCanvas.addEventListener("mousedown", function () {

    if (images.hourHand.inBoundingBox(event.clientX, event.clientY)) {
      dynamicCanvas.onmousemove = function () {
        mousePositionX = event.clientX;
        mousePositionY = event.clientY;

        reqFrame = window.requestAnimationFrame(hourhand);
      };
    } else if (images.minuteHand.inBoundingBox(event.clientX, event.clientY)) {
      dynamicCanvas.onmousemove = function () {
        mousePositionX = event.clientX;
        mousePositionY = event.clientY;

        reqFrame = window.requestAnimationFrame(minuteHand);
      };
    }
  });

  //Stop the animation of the minute or hour hand.
  dynamicCanvas.addEventListener("mouseup", function () {
    window.cancelAnimationFrame(reqFrame);
    dynamicCanvas.onmousemove = null;
  });
}

//Makes the minutehand point to the cursor 
function minuteHand() {
  var dx = mousePositionX - images.minuteHand.midpointX;
  var dy = mousePositionY - images.minuteHand.bottomPart;
  angle = Math.atan2(dy, dx) + 1.5708;
  var degrees = Math.floor(angle * 57.2958);
  degrees = degrees < 0 ? 360 + degrees : degrees;

  /**
   * Draw a vertical and horizontal line on the clock. If the minute hand is in the bottom 2 quadrants
   * then ignore it. If the minute hand is in the top left quadrant then in the right quadrant then add 1 to
   * the hours other wise subtract one.
   */

  if (degrees <= 90 || degrees >= 270) {
    if (degrees >= 270 && degrees < 360) {
      inleftQuadrant = true;
      if (inrightQuadrant) {
        hourcount--;
        inrightQuadrant = false;
        minutes = 59;
      }
    }

    if (degrees >= 0 && degrees <= 90) {
      inrightQuadrant = true;
      if (inleftQuadrant) {

        hourcount++;
        inleftQuadrant = false;
      }
    }
  } else {
    inrightQuadrant = false;
    inleftQuadrant = false;
  }
  hours = hourcount;

  hourHandAngle = (hourcount * degPerHour + Math.floor(degrees / minuteHandDegree * hourHandDegree)) * (Math.PI / 180);
  minutes = Math.floor(degrees / minuteHandDegree);
  correctHour();
  dynamicContext.clearRect(0, 0, dynamicCanvas.width, dynamicCanvas.height);
  rotateImage(angle, images.minuteHand.midpointX, images.minuteHand.bottomPart, images.minuteHand);
  rotateImage(hourHandAngle, images.hourHand.midpointX, images.hourHand.bottomPart, images.hourHand);
  dynamicContext.fillText(padInput(hours), hourHandxPos, hourHandyPos);
  dynamicContext.fillText(padInput(minutes), minuteHandxPos, minuteHandyPos);
}

//Makes the hour hand point to the cursor
function hourhand() {
  var dx = mousePositionX - images.hourHand.midpointX;
  var dy = mousePositionY - images.hourHand.bottomPart;

  angle = Math.atan2(dy, dx) + 1.5708;
  var degrees = Math.round(angle * 57.2958 * 10) / 10;
  degrees = degrees < 0 ? 360 + degrees : degrees;
  var minutehandmovement = degrees / hourHandDegree * minuteHandDegree * (Math.PI / 180);

  minutes = Math.floor(degrees / hourHandDegree % 60);
  hours = Math.floor(degrees / degPerHour);
  correctHour();

  dynamicContext.clearRect(0, 0, dynamicCanvas.width, dynamicCanvas.height);
  rotateImage(minutehandmovement, images.minuteHand.midpointX, images.minuteHand.bottomPart, images.minuteHand);
  rotateImage(angle, images.hourHand.midpointX, images.hourHand.bottomPart, images.hourHand);
  dynamicContext.fillText(padInput(hours), hourHandxPos, hourHandyPos);
  dynamicContext.fillText(padInput(minutes), minuteHandxPos, minuteHandyPos);
}

//Reset the hours such that it is always between 1 and 12 inclusive
function correctHour() {
  hours = hours % 12;
  if (hours == 0) {
    hours = 12;
  }
  if (hours < 0) {
    hours += 12;
  }
}

//Add a 0 in front if the number has only one digit
function padInput(number) {
  return number < 10 ? "0" + number : number.toString();
}

//Perform the rotation of the canvas and draws the image on the rotated angle.
function rotateImage(angle, translateXpos, translateYpos, imageObj) {
  dynamicContext.save();
  dynamicContext.translate(translateXpos, translateYpos);
  dynamicContext.rotate(angle);
  dynamicContext.translate(-translateXpos, -translateYpos);
  dynamicContext.drawImage(imageObj.image, imageObj.xPos, imageObj.yPos);
  dynamicContext.restore();
}

imageloadObserver = window.setInterval(checkIfloaded, 400);

},{"./customImage/image.js":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvanMvY3VzdG9tSW1hZ2UvaW1hZ2UuanMiLCJhcHAvanMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lDQWEsVyxXQUFBLFc7QUFFWCx1QkFBWSxRQUFaLEVBQ0E7QUFBQTs7QUFBQTs7QUFDRSxTQUFLLE1BQUwsR0FBYyxJQUFJLEtBQUosRUFBZDtBQUNBLFNBQUssTUFBTCxDQUFZLE1BQVosR0FBcUIsWUFDckI7QUFDRSxZQUFLLE9BQUwsR0FBZSxJQUFmO0FBQ0QsS0FIRDtBQUlBLFNBQUssTUFBTCxDQUFZLEdBQVosR0FBa0IsUUFBbEI7QUFDRDs7OztrQ0F3RWEsQyxFQUFFLEMsRUFDakI7QUFDRSxhQUFTLEtBQUssS0FBSyxXQUFWLElBQXlCLEtBQUssS0FBSyxXQUFMLEdBQWtCLEtBQUssS0FBdEQsSUFBaUUsS0FBSyxLQUFLLFdBQVYsSUFBeUIsS0FBSyxLQUFLLFdBQUwsR0FBbUIsS0FBSyxNQUEvSDtBQUNEOzs7c0JBekVTLEksRUFDVjtBQUNFLFdBQUssS0FBTCxHQUFhLElBQWI7QUFDRCxLO3dCQVFEO0FBQ0UsYUFBTyxLQUFLLEtBQVo7QUFDRDs7O3NCQVJTLEksRUFDVjtBQUNFLFdBQUssS0FBTCxHQUFhLElBQWI7QUFDRCxLO3dCQU9EO0FBQ0UsYUFBTyxLQUFLLEtBQVo7QUFDRDs7O3dCQUdEO0FBQ0UsYUFBTyxLQUFLLE1BQVo7QUFDRDs7O3dCQUdEO0FBQ0UsYUFBTyxLQUFLLE9BQVo7QUFDRDs7O3dCQUdEO0FBQ0UsYUFBTyxLQUFLLE1BQUwsQ0FBWSxLQUFuQjtBQUNEOzs7d0JBR0Q7QUFDRSxhQUFPLEtBQUssTUFBTCxDQUFZLE1BQW5CO0FBQ0Q7Ozt3QkFHRDtBQUNFLGFBQU8sS0FBSyxZQUFaO0FBQ0QsSztzQkFPZSxJLEVBQ2hCO0FBQ0UsV0FBSyxZQUFMLEdBQW9CLElBQXBCO0FBQ0Q7Ozt3QkFQRDtBQUNFLGFBQU8sS0FBSyxZQUFaO0FBQ0QsSztzQkFPZSxJLEVBQ2hCO0FBQ0UsV0FBSyxZQUFMLEdBQW9CLElBQXBCO0FBQ0Q7Ozt3QkFJRDtBQUNFLGFBQU8sS0FBSyxNQUFMLENBQVksS0FBWixHQUFrQixDQUFsQixHQUFzQixLQUFLLElBQWxDO0FBQ0Q7Ozt3QkFHRDtBQUNFLGFBQU8sS0FBSyxNQUFMLENBQVksTUFBWixHQUFxQixLQUFLLElBQWpDO0FBQ0Q7Ozs7Ozs7OztBQ2hGRjs7QUFFQSxJQUFNLG1CQUFtQixTQUFTLGNBQVQsQ0FBd0IsWUFBeEIsQ0FBekI7QUFDQSxJQUFNLGdCQUFnQixTQUFTLGNBQVQsQ0FBd0IsU0FBeEIsQ0FBdEI7QUFDQSxJQUFNLGlCQUFpQixjQUFjLFVBQWQsQ0FBeUIsSUFBekIsQ0FBdkI7QUFDQSxJQUFNLG9CQUFvQixpQkFBaUIsVUFBakIsQ0FBNEIsSUFBNUIsQ0FBMUI7O0FBR0EsaUJBQWlCLEtBQWpCLEdBQXlCLE9BQU8sVUFBaEM7QUFDQSxpQkFBaUIsTUFBakIsR0FBMEIsT0FBTyxXQUFqQzs7QUFFQSxjQUFjLEtBQWQsR0FBc0IsT0FBTyxVQUE3QjtBQUNBLGNBQWMsTUFBZCxHQUF1QixPQUFPLFdBQTlCOztBQUVBLElBQU0sbUJBQW1CLENBQXpCO0FBQ0EsSUFBTSxpQkFBaUIsR0FBdkI7QUFDQSxJQUFNLGFBQWEsRUFBbkI7O0FBRUEsSUFBSSxjQUFKLEVBQW1CLGNBQW5CLEVBQWtDLFlBQWxDLEVBQStDLFlBQS9DO0FBQ0EsSUFBSSxpQkFBaUIsS0FBckI7QUFDQSxJQUFJLGtCQUFrQixLQUF0Qjs7QUFFQSxJQUFJLGlCQUFpQixDQUFyQjtBQUNBLElBQUksaUJBQWlCLENBQXJCO0FBQ0EsSUFBSSxnQkFBZ0IsQ0FBcEI7QUFDQSxJQUFJLFFBQVEsQ0FBWjtBQUNBLElBQUksY0FBYyxDQUFsQjtBQUNBLElBQUksVUFBVSxDQUFkO0FBQ0EsSUFBSSxRQUFRLEVBQVo7O0FBRUEsSUFBSSxRQUFKO0FBQ0EsSUFBSSxZQUFZLENBQWhCOztBQUVBLElBQU0sU0FBUztBQUNiLGNBQVksdUJBQWdCLGdDQUFoQixDQURDO0FBRWIsY0FBWSx1QkFBZ0Isa0NBQWhCLENBRkM7QUFHYixjQUFZLHVCQUFnQiw4Q0FBaEIsQ0FIQztBQUliLFlBQVUsdUJBQWdCLDRDQUFoQixDQUpHO0FBS2IsZ0JBQWMsdUJBQWdCLDJDQUFoQjtBQUxELENBQWY7O0FBUUEsSUFBSSxpQkFBSjs7QUFFQTtBQUNBLFNBQVMsYUFBVCxHQUF5QjtBQUN2QixNQUFJLGVBQWUsQ0FBbkI7QUFDQSxNQUFJLFlBQVksQ0FBaEI7O0FBRUEsT0FBSyxJQUFJLEtBQVQsSUFBa0IsTUFBbEIsRUFBMEI7QUFDeEI7QUFDRDs7QUFFRCxPQUFLLElBQUksS0FBVCxJQUFrQixNQUFsQixFQUEwQjtBQUN4QixRQUFJLE9BQU8sS0FBUCxFQUFjLE9BQWxCLEVBQTJCOztBQUV6QjtBQUNEO0FBQ0Y7QUFDRCxNQUFJLGdCQUFnQixTQUFwQixFQUErQjs7QUFFN0Isa0JBQWMsaUJBQWQ7QUFDQTtBQUVEO0FBQ0Y7O0FBRUQ7Ozs7O0FBS0EsU0FBUyxhQUFULEdBQXlCOztBQUV2QixTQUFPLFVBQVAsQ0FBa0IsSUFBbEIsR0FBeUIsQ0FBekI7QUFDQSxTQUFPLFVBQVAsQ0FBa0IsSUFBbEIsR0FBeUIsQ0FBekI7QUFDQSxTQUFPLFVBQVAsQ0FBa0IsSUFBbEIsR0FBeUIsaUJBQWlCLEtBQWpCLEdBQXlCLENBQXpCLEdBQTZCLE9BQU8sVUFBUCxDQUFrQixLQUF4RTtBQUNBLFNBQU8sVUFBUCxDQUFrQixJQUFsQixHQUF5QixpQkFBaUIsTUFBakIsR0FBMEIsQ0FBbkQ7QUFDQSxTQUFPLFVBQVAsQ0FBa0IsSUFBbEIsR0FBeUIsT0FBTyxVQUFQLENBQWtCLFNBQWxCLEdBQThCLE9BQU8sVUFBUCxDQUFrQixLQUFsQixHQUEwQixDQUFqRjtBQUNBLFNBQU8sVUFBUCxDQUFrQixJQUFsQixHQUEwQixjQUFjLE1BQWQsR0FBdUIsQ0FBeEIsR0FBOEIsT0FBTyxVQUFQLENBQWtCLE1BQWxCLEdBQTJCLENBQXpELEdBQThELE9BQU8sVUFBUCxDQUFrQixNQUF6RztBQUNBLFNBQU8sUUFBUCxDQUFnQixJQUFoQixHQUF1QixPQUFPLFVBQVAsQ0FBa0IsSUFBbEIsR0FBeUIsT0FBTyxVQUFQLENBQWtCLEtBQWxCLEdBQTBCLENBQW5ELEdBQXVELE9BQU8sUUFBUCxDQUFnQixLQUFoQixHQUF3QixDQUF0RztBQUNBLFNBQU8sUUFBUCxDQUFnQixJQUFoQixHQUF3QixPQUFPLFVBQVAsQ0FBa0IsSUFBbEIsR0FBeUIsT0FBTyxVQUFQLENBQWtCLE1BQWxCLEdBQTJCLENBQXJELEdBQTBELE9BQU8sUUFBUCxDQUFnQixNQUFqRztBQUNBLFNBQU8sWUFBUCxDQUFvQixJQUFwQixHQUE0QixpQkFBaUIsS0FBakIsR0FBeUIsQ0FBMUIsR0FBK0IsQ0FBL0IsR0FBbUMsT0FBTyxZQUFQLENBQW9CLEtBQWxGO0FBQ0EsU0FBTyxZQUFQLENBQW9CLElBQXBCLEdBQTRCLE9BQU8sVUFBUCxDQUFrQixNQUFsQixHQUEyQixDQUEzQixHQUErQixpQkFBaUIsTUFBakIsR0FBMEIsQ0FBMUQsR0FBZ0UsT0FBTyxZQUFQLENBQW9CLE1BQXBCLEdBQTZCLENBQXhIO0FBQ0EsU0FBTyxVQUFQLENBQWtCLFdBQWxCLEdBQWdDLE9BQU8sVUFBUCxDQUFrQixJQUFsRDtBQUNBLFNBQU8sVUFBUCxDQUFrQixXQUFsQixHQUFnQyxPQUFPLFVBQVAsQ0FBa0IsSUFBbEQ7QUFDQSxpQkFBZSxPQUFPLFlBQVAsQ0FBb0IsSUFBcEIsR0FBNEIsT0FBTyxZQUFQLENBQW9CLEtBQXJCLEdBQThCLENBQXhFO0FBQ0EsaUJBQWUsT0FBTyxZQUFQLENBQW9CLElBQXBCLEdBQTJCLE9BQU8sWUFBUCxDQUFvQixNQUFwQixHQUE2QixDQUF2RTtBQUNBLFNBQU8sUUFBUCxDQUFnQixXQUFoQixHQUE4QixPQUFPLFFBQVAsQ0FBZ0IsSUFBOUM7QUFDQSxTQUFPLFFBQVAsQ0FBZ0IsV0FBaEIsR0FBOEIsT0FBTyxRQUFQLENBQWdCLElBQTlDO0FBQ0EsbUJBQWlCLGVBQWdCLE9BQU8sWUFBUCxDQUFvQixLQUFwQixHQUE0QixDQUE3QixHQUFrQyxDQUFsRTtBQUNBLG1CQUFpQixZQUFqQjtBQUNBO0FBQ0E7QUFFRDs7QUFFRDtBQUNBLFNBQVMsSUFBVCxHQUNBO0FBQ0Usb0JBQWtCLFNBQWxCLENBQTRCLE9BQU8sVUFBUCxDQUFrQixLQUE5QyxFQUFxRCxPQUFPLFVBQVAsQ0FBa0IsSUFBdkUsRUFBNkUsT0FBTyxVQUFQLENBQWtCLElBQS9GO0FBQ0Esb0JBQWtCLFNBQWxCLENBQTRCLE9BQU8sVUFBUCxDQUFrQixLQUE5QyxFQUFxRCxPQUFPLFVBQVAsQ0FBa0IsSUFBdkUsRUFBNkUsT0FBTyxVQUFQLENBQWtCLElBQS9GO0FBQ0Esb0JBQWtCLFNBQWxCLENBQTRCLE9BQU8sWUFBUCxDQUFvQixLQUFoRCxFQUF1RCxPQUFPLFlBQVAsQ0FBb0IsSUFBM0UsRUFBaUYsT0FBTyxZQUFQLENBQW9CLElBQXJHO0FBQ0EsaUJBQWUsU0FBZixDQUF5QixPQUFPLFVBQVAsQ0FBa0IsS0FBM0MsRUFBa0QsT0FBTyxVQUFQLENBQWtCLElBQXBFLEVBQTBFLE9BQU8sVUFBUCxDQUFrQixJQUE1RjtBQUNBLGlCQUFlLFNBQWYsQ0FBeUIsT0FBTyxRQUFQLENBQWdCLEtBQXpDLEVBQWdELE9BQU8sVUFBUCxDQUFrQixJQUFsRSxFQUF3RSxPQUFPLFFBQVAsQ0FBZ0IsSUFBeEY7QUFDQSxpQkFBZSxJQUFmLEdBQXNCLDBCQUF0QjtBQUNBLGlCQUFlLFNBQWYsR0FBMkIsU0FBM0I7QUFDQSxvQkFBa0IsSUFBbEIsR0FBeUIsZUFBZSxJQUF4QztBQUNBLG9CQUFrQixTQUFsQixHQUE4QixlQUFlLFNBQTdDO0FBQ0EsaUJBQWUsUUFBZixDQUF3QixJQUF4QixFQUE4QixZQUE5QixFQUE0QyxZQUE1QztBQUNBLG9CQUFrQixRQUFsQixDQUEyQixHQUEzQixFQUFnQyxlQUFnQixJQUFJLE9BQU8sWUFBUCxDQUFvQixLQUF6QixHQUFrQyxDQUFqRixFQUFvRixlQUFlLENBQW5HO0FBQ0EsaUJBQWUsUUFBZixDQUF3QixJQUF4QixFQUE4QixjQUE5QixFQUE4QyxjQUE5QztBQUNEOztBQUVELFNBQVMsWUFBVCxHQUF3QjtBQUN0Qjs7OztBQUlBLGdCQUFjLGdCQUFkLENBQStCLFdBQS9CLEVBQTRDLFlBQU07O0FBRWhELFFBQUcsT0FBTyxRQUFQLENBQWdCLGFBQWhCLENBQThCLE1BQU0sT0FBcEMsRUFBNEMsTUFBTSxPQUFsRCxDQUFILEVBQ0E7QUFDRSxvQkFBYyxXQUFkLEdBQTRCLFlBQzVCO0FBQ0UseUJBQWlCLE1BQU0sT0FBdkI7QUFDQSx5QkFBaUIsTUFBTSxPQUF2Qjs7QUFFQSxtQkFBVyxPQUFPLHFCQUFQLENBQTZCLFFBQTdCLENBQVg7QUFDRCxPQU5EO0FBT0QsS0FURCxNQVdLLElBQUcsT0FBTyxVQUFQLENBQWtCLGFBQWxCLENBQWdDLE1BQU0sT0FBdEMsRUFBOEMsTUFBTSxPQUFwRCxDQUFILEVBQ0w7QUFDRyxvQkFBYyxXQUFkLEdBQTRCLFlBQzdCO0FBQ0UseUJBQWlCLE1BQU0sT0FBdkI7QUFDQSx5QkFBaUIsTUFBTSxPQUF2Qjs7QUFFQSxtQkFBVyxPQUFPLHFCQUFQLENBQTZCLFVBQTdCLENBQVg7QUFDRCxPQU5BO0FBT0Y7QUFDRixHQXZCRDs7QUF5QkE7QUFDRSxnQkFBYyxnQkFBZCxDQUErQixTQUEvQixFQUEwQyxZQUFNO0FBQzlDLFdBQU8sb0JBQVAsQ0FBNEIsUUFBNUI7QUFDQSxrQkFBYyxXQUFkLEdBQTRCLElBQTVCO0FBRUgsR0FKQztBQU1IOztBQUdEO0FBQ0EsU0FBUyxVQUFULEdBQXNCO0FBQ3BCLE1BQUksS0FBSyxpQkFBa0IsT0FBTyxVQUFQLENBQWtCLFNBQTdDO0FBQ0EsTUFBSSxLQUFLLGlCQUFrQixPQUFPLFVBQVAsQ0FBa0IsVUFBN0M7QUFDQSxVQUFRLEtBQUssS0FBTCxDQUFXLEVBQVgsRUFBZSxFQUFmLElBQXFCLE1BQTdCO0FBQ0EsTUFBSSxVQUFVLEtBQUssS0FBTCxDQUFXLFFBQVEsT0FBbkIsQ0FBZDtBQUNBLFlBQVcsVUFBVSxDQUFYLEdBQWdCLE1BQU0sT0FBdEIsR0FBZ0MsT0FBMUM7O0FBRUY7Ozs7OztBQU9FLE1BQUksV0FBVyxFQUFYLElBQWlCLFdBQVcsR0FBaEMsRUFBcUM7QUFDbkMsUUFBSSxXQUFXLEdBQVgsSUFBa0IsVUFBVSxHQUFoQyxFQUFxQztBQUNuQyx1QkFBaUIsSUFBakI7QUFDQSxVQUFJLGVBQUosRUFBcUI7QUFDbkI7QUFDQSwwQkFBa0IsS0FBbEI7QUFDQSxrQkFBVSxFQUFWO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJLFdBQVcsQ0FBWCxJQUFnQixXQUFXLEVBQS9CLEVBQW1DO0FBQ2pDLHdCQUFrQixJQUFsQjtBQUNBLFVBQUksY0FBSixFQUFvQjs7QUFFbEI7QUFDQSx5QkFBaUIsS0FBakI7QUFDRDtBQUNGO0FBQ0YsR0FsQkQsTUFtQks7QUFDSCxzQkFBa0IsS0FBbEI7QUFDQSxxQkFBaUIsS0FBakI7QUFDRDtBQUNELFVBQVEsU0FBUjs7QUFHQSxrQkFBZ0IsQ0FBRSxZQUFZLFVBQWIsR0FBMkIsS0FBSyxLQUFMLENBQVksVUFBVSxnQkFBWCxHQUErQixjQUExQyxDQUE1QixLQUEwRixLQUFLLEVBQUwsR0FBVSxHQUFwRyxDQUFoQjtBQUNBLFlBQVUsS0FBSyxLQUFMLENBQVcsVUFBUSxnQkFBbkIsQ0FBVjtBQUNBO0FBQ0EsaUJBQWUsU0FBZixDQUF5QixDQUF6QixFQUE0QixDQUE1QixFQUErQixjQUFjLEtBQTdDLEVBQW9ELGNBQWMsTUFBbEU7QUFDQSxjQUFZLEtBQVosRUFBbUIsT0FBTyxVQUFQLENBQWtCLFNBQXJDLEVBQWdELE9BQU8sVUFBUCxDQUFrQixVQUFsRSxFQUE4RSxPQUFPLFVBQXJGO0FBQ0EsY0FBWSxhQUFaLEVBQTJCLE9BQU8sUUFBUCxDQUFnQixTQUEzQyxFQUFzRCxPQUFPLFFBQVAsQ0FBZ0IsVUFBdEUsRUFBa0YsT0FBTyxRQUF6RjtBQUNBLGlCQUFlLFFBQWYsQ0FBd0IsU0FBUyxLQUFULENBQXhCLEVBQXlDLFlBQXpDLEVBQXVELFlBQXZEO0FBQ0EsaUJBQWUsUUFBZixDQUF3QixTQUFTLE9BQVQsQ0FBeEIsRUFBMkMsY0FBM0MsRUFBMkQsY0FBM0Q7QUFDRDs7QUFFRDtBQUNBLFNBQVMsUUFBVCxHQUFvQjtBQUNsQixNQUFJLEtBQUssaUJBQWtCLE9BQU8sUUFBUCxDQUFnQixTQUEzQztBQUNBLE1BQUksS0FBSyxpQkFBa0IsT0FBTyxRQUFQLENBQWdCLFVBQTNDOztBQUVBLFVBQVEsS0FBSyxLQUFMLENBQVcsRUFBWCxFQUFlLEVBQWYsSUFBcUIsTUFBN0I7QUFDQSxNQUFJLFVBQVUsS0FBSyxLQUFMLENBQVksUUFBUSxPQUFULEdBQW9CLEVBQS9CLElBQW1DLEVBQWpEO0FBQ0EsWUFBVyxVQUFVLENBQVgsR0FBaUIsTUFBTSxPQUF2QixHQUFrQyxPQUE1QztBQUNBLE1BQUkscUJBQXNCLFVBQVEsY0FBUixHQUF5QixnQkFBMUIsSUFBK0MsS0FBSyxFQUFMLEdBQVEsR0FBdkQsQ0FBekI7O0FBRUEsWUFBVSxLQUFLLEtBQUwsQ0FBWSxVQUFRLGNBQVQsR0FBMkIsRUFBdEMsQ0FBVjtBQUNBLFVBQVEsS0FBSyxLQUFMLENBQVksVUFBUSxVQUFwQixDQUFSO0FBQ0E7O0FBRUEsaUJBQWUsU0FBZixDQUF5QixDQUF6QixFQUE0QixDQUE1QixFQUErQixjQUFjLEtBQTdDLEVBQW9ELGNBQWMsTUFBbEU7QUFDQSxjQUFZLGtCQUFaLEVBQWdDLE9BQU8sVUFBUCxDQUFrQixTQUFsRCxFQUE2RCxPQUFPLFVBQVAsQ0FBa0IsVUFBL0UsRUFBMkYsT0FBTyxVQUFsRztBQUNBLGNBQVksS0FBWixFQUFtQixPQUFPLFFBQVAsQ0FBZ0IsU0FBbkMsRUFBOEMsT0FBTyxRQUFQLENBQWdCLFVBQTlELEVBQTBFLE9BQU8sUUFBakY7QUFDQSxpQkFBZSxRQUFmLENBQXdCLFNBQVMsS0FBVCxDQUF4QixFQUF5QyxZQUF6QyxFQUF1RCxZQUF2RDtBQUNBLGlCQUFlLFFBQWYsQ0FBd0IsU0FBUyxPQUFULENBQXhCLEVBQTJDLGNBQTNDLEVBQTJELGNBQTNEO0FBQ0Q7O0FBRUQ7QUFDQSxTQUFTLFdBQVQsR0FDQTtBQUNFLFVBQVEsUUFBUSxFQUFoQjtBQUNBLE1BQUcsU0FBUyxDQUFaLEVBQ0E7QUFDRSxZQUFRLEVBQVI7QUFDRDtBQUNELE1BQUcsUUFBUSxDQUFYLEVBQ0E7QUFDRSxhQUFTLEVBQVQ7QUFDRDtBQUNGOztBQUVEO0FBQ0EsU0FBUyxRQUFULENBQWtCLE1BQWxCLEVBQTBCO0FBQ3hCLFNBQU8sU0FBUyxFQUFULEdBQWUsTUFBTSxNQUFyQixHQUErQixPQUFPLFFBQVAsRUFBdEM7QUFDRDs7QUFFRDtBQUNBLFNBQVMsV0FBVCxDQUFxQixLQUFyQixFQUE0QixhQUE1QixFQUEyQyxhQUEzQyxFQUEwRCxRQUExRCxFQUFvRTtBQUNsRSxpQkFBZSxJQUFmO0FBQ0EsaUJBQWUsU0FBZixDQUF5QixhQUF6QixFQUF3QyxhQUF4QztBQUNBLGlCQUFlLE1BQWYsQ0FBc0IsS0FBdEI7QUFDQSxpQkFBZSxTQUFmLENBQXlCLENBQUUsYUFBM0IsRUFBMkMsQ0FBRyxhQUE5QztBQUNBLGlCQUFlLFNBQWYsQ0FBeUIsU0FBUyxLQUFsQyxFQUF5QyxTQUFTLElBQWxELEVBQXdELFNBQVMsSUFBakU7QUFDQSxpQkFBZSxPQUFmO0FBRUQ7O0FBRUQsb0JBQW9CLE9BQU8sV0FBUCxDQUFtQixhQUFuQixFQUFrQyxHQUFsQyxDQUFwQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJleHBvcnQgY2xhc3MgQ3VzdG9tSW1hZ2V7XG5cbiAgY29uc3RydWN0b3IoZmlsZXBhdGgpXG4gIHtcbiAgICB0aGlzLl9pbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIHRoaXMuX2ltYWdlLm9ubG9hZCA9ICgpID0+XG4gICAge1xuICAgICAgdGhpcy5fbG9hZGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHRoaXMuX2ltYWdlLnNyYyA9IGZpbGVwYXRoO1xuICB9XG5cbiAgc2V0IHhQb3MoeFBvcylcbiB7XG4gICB0aGlzLl94cG9zID0geFBvcztcbiB9XG5cbiAgc2V0IHlQb3MoeVBvcylcbiB7XG4gICB0aGlzLl95cG9zID0geVBvcztcbiB9XG5cbiAgZ2V0IHhQb3MoKVxuIHtcbiAgIHJldHVybiB0aGlzLl94cG9zO1xuIH1cbiAgZ2V0IHlQb3MoKVxuIHtcbiAgIHJldHVybiB0aGlzLl95cG9zO1xuIH1cblxuIGdldCBpbWFnZSgpXG4ge1xuICAgcmV0dXJuIHRoaXMuX2ltYWdlO1xuIH1cblxuIGdldCBkaWRsb2FkKClcbiB7XG4gICByZXR1cm4gdGhpcy5fbG9hZGVkO1xuIH1cblxuIGdldCB3aWR0aCgpXG4ge1xuICAgcmV0dXJuIHRoaXMuX2ltYWdlLndpZHRoO1xuIH1cblxuIGdldCBoZWlnaHQoKVxuIHtcbiAgIHJldHVybiB0aGlzLl9pbWFnZS5oZWlnaHQ7XG4gfVxuXG4gZ2V0IHVwZGF0ZWRYcG9zKClcbiB7XG4gICByZXR1cm4gdGhpcy5fdXBkYXRlZFhwb3M7XG4gfVxuXG4gZ2V0IHVwZGF0ZWRZcG9zKClcbiB7XG4gICByZXR1cm4gdGhpcy5fdXBkYXRlZFlwb3M7XG4gfVxuXG4gc2V0IHVwZGF0ZWRYcG9zKHhwb3MpXG4ge1xuICAgdGhpcy5fdXBkYXRlZFhwb3MgPSB4cG9zO1xuIH1cblxuIHNldCB1cGRhdGVkWXBvcyh5cG9zKVxuIHtcbiAgIHRoaXMuX3VwZGF0ZWRZcG9zID0geXBvcztcbiB9XG5cblxuIGdldCBtaWRwb2ludFgoKVxuIHtcbiAgIHJldHVybiB0aGlzLl9pbWFnZS53aWR0aC8yICsgdGhpcy54UG9zO1xuIH1cblxuIGdldCBib3R0b21QYXJ0KClcbiB7XG4gICByZXR1cm4gdGhpcy5faW1hZ2UuaGVpZ2h0ICsgdGhpcy55UG9zO1xuIH1cblxuICBpbkJvdW5kaW5nQm94KHgseSlcbiB7XG4gICByZXR1cm4gKCh4ID49IHRoaXMudXBkYXRlZFhwb3MgJiYgeCA8PSB0aGlzLnVwZGF0ZWRYcG9zKyB0aGlzLndpZHRoKSAmJiAoeSA+PSB0aGlzLnVwZGF0ZWRZcG9zICYmIHkgPD0gdGhpcy51cGRhdGVkWXBvcyArIHRoaXMuaGVpZ2h0KSk7XG4gfVxufVxuIiwiaW1wb3J0IHtDdXN0b21JbWFnZX0gZnJvbSBcIi4vY3VzdG9tSW1hZ2UvaW1hZ2UuanNcIlxuXG5jb25zdCBiYWNrZ3JvdW5kQ2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2tncm91bmQnKTtcbmNvbnN0IGR5bmFtaWNDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHluYW1pYycpO1xuY29uc3QgZHluYW1pY0NvbnRleHQgPSBkeW5hbWljQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5jb25zdCBiYWNrZ3JvdW5kQ29udGV4dCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuXG5iYWNrZ3JvdW5kQ2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5iYWNrZ3JvdW5kQ2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuZHluYW1pY0NhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuZHluYW1pY0NhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbmNvbnN0IG1pbnV0ZUhhbmREZWdyZWUgPSA2O1xuY29uc3QgaG91ckhhbmREZWdyZWUgPSAwLjU7XG5jb25zdCBkZWdQZXJIb3VyID0gMzA7XG5cbnZhciBtaW51dGVIYW5keFBvcyxtaW51dGVIYW5keVBvcyxob3VySGFuZHhQb3MsaG91ckhhbmR5UG9zO1xudmFyIGlubGVmdFF1YWRyYW50ID0gZmFsc2U7XG52YXIgaW5yaWdodFF1YWRyYW50ID0gZmFsc2U7XG5cbnZhciBtb3VzZVBvc2l0aW9uWCA9IDA7XG52YXIgbW91c2VQb3NpdGlvblkgPSAwO1xudmFyIGhvdXJIYW5kQW5nbGUgPSAwO1xudmFyIGFuZ2xlID0gMDtcbnZhciBtb3ZpbmdBbmdsZSA9IDA7XG52YXIgbWludXRlcyA9IDA7XG52YXIgaG91cnMgPSAxMjtcblxudmFyIHJlcUZyYW1lO1xudmFyIGhvdXJjb3VudCA9IDA7XG5cbmNvbnN0IGltYWdlcyA9IHtcbiAgYmFja2dyb3VuZDogbmV3IEN1c3RvbUltYWdlKFwiLi9hc3NldHMvc3RhdGljL2JhY2tncm91bmQuanBnXCIpLFxuICB3cmlzdFdhdGNoOiBuZXcgQ3VzdG9tSW1hZ2UoXCIuL2Fzc2V0cy9zdGF0aWMvY2xvY2tyZXNpemVkLnBuZ1wiKSxcbiAgbWludXRlSGFuZDogbmV3IEN1c3RvbUltYWdlKFwiLi9hc3NldHMvZHluYW1pYy9oYW5kcy9taW51dGVoYW5kcmVzaXplZC5wbmdcIiksXG4gIGhvdXJIYW5kOiBuZXcgQ3VzdG9tSW1hZ2UoXCIuL2Fzc2V0cy9keW5hbWljL2hhbmRzL2hvdXJoYW5kcmVzaXplZC5wbmdcIiksXG4gIGRpZ2l0YWxXYXRjaDogbmV3IEN1c3RvbUltYWdlKFwiLi9hc3NldHMvc3RhdGljL2RpZ2l0YWxfdGltZXNfcmVzaXplZC5wbmdcIilcbn07XG5cbnZhciBpbWFnZWxvYWRPYnNlcnZlcjtcblxuLy9DaGVjayB0aGF0IGFsbCBpbWFnZXMgaGF2ZSBsb2FkZWRcbmZ1bmN0aW9uIGNoZWNrSWZsb2FkZWQoKSB7XG4gIGxldCBpbWFnZXNMb2FkZWQgPSAwO1xuICBsZXQgbnVtSW1hZ2VzID0gMDtcblxuICBmb3IgKHZhciBpbWFnZSBpbiBpbWFnZXMpIHtcbiAgICBudW1JbWFnZXMrKztcbiAgfVxuXG4gIGZvciAodmFyIGltYWdlIGluIGltYWdlcykge1xuICAgIGlmIChpbWFnZXNbaW1hZ2VdLmRpZGxvYWQpIHtcblxuICAgICAgaW1hZ2VzTG9hZGVkKys7XG4gICAgfVxuICB9XG4gIGlmIChpbWFnZXNMb2FkZWQgPj0gbnVtSW1hZ2VzKSB7XG5cbiAgICBjbGVhckludGVydmFsKGltYWdlbG9hZE9ic2VydmVyKTtcbiAgICBzZXRQYXJhbWV0ZXJzKCk7XG5cbiAgfVxufVxuXG4vKipcbiAqIFNldHMgYWxsIHRoZSBwYXJhbWV0ZXJzLiBUaGUgYmFja2dyb3VuZCBpcyBzdGF0aWMgYW5kIHN0YXJ0cyBmcm9tIHRoZSBvcmlnaW4uXG4gKiBUaGUgYW5hbG9ndWUgY2xvY2sgaXMgcGxhY2VkIDEvNCBvZiB0aGUgc2NyZWVuIGZyb20gdGhlIGxlZnQuIEFsbCB0aGUgb3RoZXIgb2JqZWN0cyBhcmUgcmVsYXRpdmUgdG8gdGhlXG4gKiBhbmFsb2d1ZSBjbG9jay4gXG4gKi9cbmZ1bmN0aW9uIHNldFBhcmFtZXRlcnMoKSB7XG5cbiAgaW1hZ2VzLmJhY2tncm91bmQueFBvcyA9IDA7XG4gIGltYWdlcy5iYWNrZ3JvdW5kLnlQb3MgPSAwO1xuICBpbWFnZXMud3Jpc3RXYXRjaC54UG9zID0gYmFja2dyb3VuZENhbnZhcy53aWR0aCAvIDQgLSBpbWFnZXMud3Jpc3RXYXRjaC53aWR0aDtcbiAgaW1hZ2VzLndyaXN0V2F0Y2gueVBvcyA9IGJhY2tncm91bmRDYW52YXMuaGVpZ2h0IC8gNDtcbiAgaW1hZ2VzLm1pbnV0ZUhhbmQueFBvcyA9IGltYWdlcy53cmlzdFdhdGNoLm1pZHBvaW50WCAtIGltYWdlcy5taW51dGVIYW5kLndpZHRoIC8gMjtcbiAgaW1hZ2VzLm1pbnV0ZUhhbmQueVBvcyA9IChkeW5hbWljQ2FudmFzLmhlaWdodCAvIDQpICsgKGltYWdlcy53cmlzdFdhdGNoLmhlaWdodCAvIDIpIC0gaW1hZ2VzLm1pbnV0ZUhhbmQuaGVpZ2h0O1xuICBpbWFnZXMuaG91ckhhbmQueFBvcyA9IGltYWdlcy53cmlzdFdhdGNoLnhQb3MgKyBpbWFnZXMud3Jpc3RXYXRjaC53aWR0aCAvIDIgLSBpbWFnZXMuaG91ckhhbmQud2lkdGggLyAyO1xuICBpbWFnZXMuaG91ckhhbmQueVBvcyA9IChpbWFnZXMud3Jpc3RXYXRjaC55UG9zICsgaW1hZ2VzLndyaXN0V2F0Y2guaGVpZ2h0IC8gMikgLSBpbWFnZXMuaG91ckhhbmQuaGVpZ2h0O1xuICBpbWFnZXMuZGlnaXRhbFdhdGNoLnhQb3MgPSAoYmFja2dyb3VuZENhbnZhcy53aWR0aCAqIDMpIC8gNCAtIGltYWdlcy5kaWdpdGFsV2F0Y2gud2lkdGg7XG4gIGltYWdlcy5kaWdpdGFsV2F0Y2gueVBvcyA9IChpbWFnZXMud3Jpc3RXYXRjaC5oZWlnaHQgLyAyICsgYmFja2dyb3VuZENhbnZhcy5oZWlnaHQgLyA0KSAtIChpbWFnZXMuZGlnaXRhbFdhdGNoLmhlaWdodCAvIDIpO1xuICBpbWFnZXMubWludXRlSGFuZC51cGRhdGVkWHBvcyA9IGltYWdlcy5taW51dGVIYW5kLnhQb3M7XG4gIGltYWdlcy5taW51dGVIYW5kLnVwZGF0ZWRZcG9zID0gaW1hZ2VzLm1pbnV0ZUhhbmQueVBvcztcbiAgaG91ckhhbmR4UG9zID0gaW1hZ2VzLmRpZ2l0YWxXYXRjaC54UG9zICsgKGltYWdlcy5kaWdpdGFsV2F0Y2gud2lkdGgpIC8gODtcbiAgaG91ckhhbmR5UG9zID0gaW1hZ2VzLmRpZ2l0YWxXYXRjaC55UG9zICsgaW1hZ2VzLmRpZ2l0YWxXYXRjaC5oZWlnaHQgLyAyO1xuICBpbWFnZXMuaG91ckhhbmQudXBkYXRlZFhwb3MgPSBpbWFnZXMuaG91ckhhbmQueFBvcztcbiAgaW1hZ2VzLmhvdXJIYW5kLnVwZGF0ZWRZcG9zID0gaW1hZ2VzLmhvdXJIYW5kLnlQb3M7XG4gIG1pbnV0ZUhhbmR4UG9zID0gaG91ckhhbmR4UG9zICsgKGltYWdlcy5kaWdpdGFsV2F0Y2gud2lkdGggKiAzKSAvIDg7XG4gIG1pbnV0ZUhhbmR5UG9zID0gaG91ckhhbmR5UG9zO1xuICBkcmF3KCk7XG4gIHNldExpc3RlbmVycygpO1xuXG59XG5cbi8vRHJhdyB0aGUgaW1hZ2VzIGF0IHRoZSBzZXQgcG9zaXRpb25zXG5mdW5jdGlvbiBkcmF3KClcbntcbiAgYmFja2dyb3VuZENvbnRleHQuZHJhd0ltYWdlKGltYWdlcy5iYWNrZ3JvdW5kLmltYWdlLCBpbWFnZXMuYmFja2dyb3VuZC54UG9zLCBpbWFnZXMuYmFja2dyb3VuZC55UG9zKTtcbiAgYmFja2dyb3VuZENvbnRleHQuZHJhd0ltYWdlKGltYWdlcy53cmlzdFdhdGNoLmltYWdlLCBpbWFnZXMud3Jpc3RXYXRjaC54UG9zLCBpbWFnZXMud3Jpc3RXYXRjaC55UG9zKTtcbiAgYmFja2dyb3VuZENvbnRleHQuZHJhd0ltYWdlKGltYWdlcy5kaWdpdGFsV2F0Y2guaW1hZ2UsIGltYWdlcy5kaWdpdGFsV2F0Y2gueFBvcywgaW1hZ2VzLmRpZ2l0YWxXYXRjaC55UG9zKTtcbiAgZHluYW1pY0NvbnRleHQuZHJhd0ltYWdlKGltYWdlcy5taW51dGVIYW5kLmltYWdlLCBpbWFnZXMubWludXRlSGFuZC54UG9zLCBpbWFnZXMubWludXRlSGFuZC55UG9zKTtcbiAgZHluYW1pY0NvbnRleHQuZHJhd0ltYWdlKGltYWdlcy5ob3VySGFuZC5pbWFnZSwgaW1hZ2VzLm1pbnV0ZUhhbmQueFBvcywgaW1hZ2VzLmhvdXJIYW5kLnlQb3MpO1xuICBkeW5hbWljQ29udGV4dC5mb250ID0gJzUwcHQgdmVyZGFuYSwgc2Fucy1zZXJpZic7XG4gIGR5bmFtaWNDb250ZXh0LmZpbGxTdHlsZSA9IFwiI0ZGRkZGRlwiO1xuICBiYWNrZ3JvdW5kQ29udGV4dC5mb250ID0gZHluYW1pY0NvbnRleHQuZm9udDtcbiAgYmFja2dyb3VuZENvbnRleHQuZmlsbFN0eWxlID0gZHluYW1pY0NvbnRleHQuZmlsbFN0eWxlO1xuICBkeW5hbWljQ29udGV4dC5maWxsVGV4dChcIjEyXCIsIGhvdXJIYW5keFBvcywgaG91ckhhbmR5UG9zKTtcbiAgYmFja2dyb3VuZENvbnRleHQuZmlsbFRleHQoXCI6XCIsIGhvdXJIYW5keFBvcyArICgyICogaW1hZ2VzLmRpZ2l0YWxXYXRjaC53aWR0aCkgLyA4LCBob3VySGFuZHlQb3MgLSA1KTtcbiAgZHluYW1pY0NvbnRleHQuZmlsbFRleHQoXCIwMFwiLCBtaW51dGVIYW5keFBvcywgbWludXRlSGFuZHlQb3MpO1xufVxuXG5mdW5jdGlvbiBzZXRMaXN0ZW5lcnMoKSB7XG4gIC8qXG4gICAgKiBXaGVuIG1vdXNlIGlzIHByZXNzZWQuIENoZWNrIGlmIHRoZSBtb3VzZSBpcyBpbiB0aGUgYm91bmRpbmcgYm94IG9mIGVpdGhlciB0aGUgaG91cmhhbmQgb3IgdGhlIG1pbnV0ZWhhbmRcbiAgICAqIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uLlxuICAgICovXG4gIGR5bmFtaWNDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoKSA9PiB7XG5cbiAgICBpZihpbWFnZXMuaG91ckhhbmQuaW5Cb3VuZGluZ0JveChldmVudC5jbGllbnRYLGV2ZW50LmNsaWVudFkpKVxuICAgIHtcbiAgICAgIGR5bmFtaWNDYW52YXMub25tb3VzZW1vdmUgPSAoKSA9PlxuICAgICAge1xuICAgICAgICBtb3VzZVBvc2l0aW9uWCA9IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIG1vdXNlUG9zaXRpb25ZID0gZXZlbnQuY2xpZW50WTtcblxuICAgICAgICByZXFGcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaG91cmhhbmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVsc2UgaWYoaW1hZ2VzLm1pbnV0ZUhhbmQuaW5Cb3VuZGluZ0JveChldmVudC5jbGllbnRYLGV2ZW50LmNsaWVudFkpKVxuICAgIHtcbiAgICAgICBkeW5hbWljQ2FudmFzLm9ubW91c2Vtb3ZlID0gKCkgPT5cbiAgICAgIHtcbiAgICAgICAgbW91c2VQb3NpdGlvblggPSBldmVudC5jbGllbnRYO1xuICAgICAgICBtb3VzZVBvc2l0aW9uWSA9IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgcmVxRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1pbnV0ZUhhbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy9TdG9wIHRoZSBhbmltYXRpb24gb2YgdGhlIG1pbnV0ZSBvciBob3VyIGhhbmQuXG4gICAgZHluYW1pY0NhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCAoKSA9PiB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxRnJhbWUpO1xuICAgICAgZHluYW1pY0NhbnZhcy5vbm1vdXNlbW92ZSA9IG51bGw7XG5cbiAgfSk7XG5cbn1cblxuXG4vL01ha2VzIHRoZSBtaW51dGVoYW5kIHBvaW50IHRvIHRoZSBjdXJzb3IgXG5mdW5jdGlvbiBtaW51dGVIYW5kKCkge1xuICB2YXIgZHggPSBtb3VzZVBvc2l0aW9uWCAtIChpbWFnZXMubWludXRlSGFuZC5taWRwb2ludFgpO1xuICB2YXIgZHkgPSBtb3VzZVBvc2l0aW9uWSAtIChpbWFnZXMubWludXRlSGFuZC5ib3R0b21QYXJ0KTtcbiAgYW5nbGUgPSBNYXRoLmF0YW4yKGR5LCBkeCkgKyAxLjU3MDg7XG4gIHZhciBkZWdyZWVzID0gTWF0aC5mbG9vcihhbmdsZSAqIDU3LjI5NTgpO1xuICBkZWdyZWVzID0gKGRlZ3JlZXMgPCAwKSA/IDM2MCArIGRlZ3JlZXMgOiBkZWdyZWVzO1xuXG4vKipcbiAqIERyYXcgYSB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBsaW5lIG9uIHRoZSBjbG9jay4gSWYgdGhlIG1pbnV0ZSBoYW5kIGlzIGluIHRoZSBib3R0b20gMiBxdWFkcmFudHNcbiAqIHRoZW4gaWdub3JlIGl0LiBJZiB0aGUgbWludXRlIGhhbmQgaXMgaW4gdGhlIHRvcCBsZWZ0IHF1YWRyYW50IHRoZW4gaW4gdGhlIHJpZ2h0IHF1YWRyYW50IHRoZW4gYWRkIDEgdG9cbiAqIHRoZSBob3VycyBvdGhlciB3aXNlIHN1YnRyYWN0IG9uZS5cbiAqL1xuXG5cbiAgaWYgKGRlZ3JlZXMgPD0gOTAgfHwgZGVncmVlcyA+PSAyNzApIHtcbiAgICBpZiAoZGVncmVlcyA+PSAyNzAgJiYgZGVncmVlcyA8IDM2MCkge1xuICAgICAgaW5sZWZ0UXVhZHJhbnQgPSB0cnVlO1xuICAgICAgaWYgKGlucmlnaHRRdWFkcmFudCkge1xuICAgICAgICBob3VyY291bnQtLTtcbiAgICAgICAgaW5yaWdodFF1YWRyYW50ID0gZmFsc2U7XG4gICAgICAgIG1pbnV0ZXMgPSA1OTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGVncmVlcyA+PSAwICYmIGRlZ3JlZXMgPD0gOTApIHtcbiAgICAgIGlucmlnaHRRdWFkcmFudCA9IHRydWU7XG4gICAgICBpZiAoaW5sZWZ0UXVhZHJhbnQpIHtcblxuICAgICAgICBob3VyY291bnQrKztcbiAgICAgICAgaW5sZWZ0UXVhZHJhbnQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgaW5yaWdodFF1YWRyYW50ID0gZmFsc2U7XG4gICAgaW5sZWZ0UXVhZHJhbnQgPSBmYWxzZTtcbiAgfVxuICBob3VycyA9IGhvdXJjb3VudDtcblxuXG4gIGhvdXJIYW5kQW5nbGUgPSAoKGhvdXJjb3VudCAqIGRlZ1BlckhvdXIpICsgTWF0aC5mbG9vcigoZGVncmVlcyAvIG1pbnV0ZUhhbmREZWdyZWUpICogaG91ckhhbmREZWdyZWUpKSAqIChNYXRoLlBJIC8gMTgwKTtcbiAgbWludXRlcyA9IE1hdGguZmxvb3IoZGVncmVlcy9taW51dGVIYW5kRGVncmVlKTtcbiAgY29ycmVjdEhvdXIoKTtcbiAgZHluYW1pY0NvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGR5bmFtaWNDYW52YXMud2lkdGgsIGR5bmFtaWNDYW52YXMuaGVpZ2h0KTtcbiAgcm90YXRlSW1hZ2UoYW5nbGUsIGltYWdlcy5taW51dGVIYW5kLm1pZHBvaW50WCwgaW1hZ2VzLm1pbnV0ZUhhbmQuYm90dG9tUGFydCwgaW1hZ2VzLm1pbnV0ZUhhbmQpO1xuICByb3RhdGVJbWFnZShob3VySGFuZEFuZ2xlLCBpbWFnZXMuaG91ckhhbmQubWlkcG9pbnRYLCBpbWFnZXMuaG91ckhhbmQuYm90dG9tUGFydCwgaW1hZ2VzLmhvdXJIYW5kKTtcbiAgZHluYW1pY0NvbnRleHQuZmlsbFRleHQocGFkSW5wdXQoaG91cnMpLCBob3VySGFuZHhQb3MsIGhvdXJIYW5keVBvcyk7XG4gIGR5bmFtaWNDb250ZXh0LmZpbGxUZXh0KHBhZElucHV0KG1pbnV0ZXMpLCBtaW51dGVIYW5keFBvcywgbWludXRlSGFuZHlQb3MpO1xufVxuXG4vL01ha2VzIHRoZSBob3VyIGhhbmQgcG9pbnQgdG8gdGhlIGN1cnNvclxuZnVuY3Rpb24gaG91cmhhbmQoKSB7XG4gIHZhciBkeCA9IG1vdXNlUG9zaXRpb25YIC0gKGltYWdlcy5ob3VySGFuZC5taWRwb2ludFgpO1xuICB2YXIgZHkgPSBtb3VzZVBvc2l0aW9uWSAtIChpbWFnZXMuaG91ckhhbmQuYm90dG9tUGFydCk7XG5cbiAgYW5nbGUgPSBNYXRoLmF0YW4yKGR5LCBkeCkgKyAxLjU3MDg7XG4gIHZhciBkZWdyZWVzID0gTWF0aC5yb3VuZCgoYW5nbGUgKiA1Ny4yOTU4KSAqIDEwKS8xMDtcbiAgZGVncmVlcyA9IChkZWdyZWVzIDwgMCkgPyAoMzYwICsgZGVncmVlcykgOiBkZWdyZWVzO1xuICB2YXIgbWludXRlaGFuZG1vdmVtZW50ID0gKGRlZ3JlZXMvaG91ckhhbmREZWdyZWUgKiBtaW51dGVIYW5kRGVncmVlKSAqIChNYXRoLlBJLzE4MCk7XG5cbiAgbWludXRlcyA9IE1hdGguZmxvb3IoKGRlZ3JlZXMvaG91ckhhbmREZWdyZWUpICUgNjApO1xuICBob3VycyA9IE1hdGguZmxvb3IoKGRlZ3JlZXMvZGVnUGVySG91cikpO1xuICBjb3JyZWN0SG91cigpO1xuXG4gIGR5bmFtaWNDb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBkeW5hbWljQ2FudmFzLndpZHRoLCBkeW5hbWljQ2FudmFzLmhlaWdodCk7XG4gIHJvdGF0ZUltYWdlKG1pbnV0ZWhhbmRtb3ZlbWVudCwgaW1hZ2VzLm1pbnV0ZUhhbmQubWlkcG9pbnRYLCBpbWFnZXMubWludXRlSGFuZC5ib3R0b21QYXJ0LCBpbWFnZXMubWludXRlSGFuZCk7XG4gIHJvdGF0ZUltYWdlKGFuZ2xlLCBpbWFnZXMuaG91ckhhbmQubWlkcG9pbnRYLCBpbWFnZXMuaG91ckhhbmQuYm90dG9tUGFydCwgaW1hZ2VzLmhvdXJIYW5kKTtcbiAgZHluYW1pY0NvbnRleHQuZmlsbFRleHQocGFkSW5wdXQoaG91cnMpLCBob3VySGFuZHhQb3MsIGhvdXJIYW5keVBvcyk7XG4gIGR5bmFtaWNDb250ZXh0LmZpbGxUZXh0KHBhZElucHV0KG1pbnV0ZXMpLCBtaW51dGVIYW5keFBvcywgbWludXRlSGFuZHlQb3MpO1xufVxuXG4vL1Jlc2V0IHRoZSBob3VycyBzdWNoIHRoYXQgaXQgaXMgYWx3YXlzIGJldHdlZW4gMSBhbmQgMTIgaW5jbHVzaXZlXG5mdW5jdGlvbiBjb3JyZWN0SG91cigpXG57XG4gIGhvdXJzID0gaG91cnMgJSAxMjtcbiAgaWYoaG91cnMgPT0gMClcbiAge1xuICAgIGhvdXJzID0gMTI7XG4gIH1cbiAgaWYoaG91cnMgPCAwKVxuICB7XG4gICAgaG91cnMgKz0gMTI7XG4gIH1cbn1cblxuLy9BZGQgYSAwIGluIGZyb250IGlmIHRoZSBudW1iZXIgaGFzIG9ubHkgb25lIGRpZ2l0XG5mdW5jdGlvbiBwYWRJbnB1dChudW1iZXIpIHtcbiAgcmV0dXJuIG51bWJlciA8IDEwID8gKFwiMFwiICsgbnVtYmVyKSA6IG51bWJlci50b1N0cmluZygpO1xufVxuXG4vL1BlcmZvcm0gdGhlIHJvdGF0aW9uIG9mIHRoZSBjYW52YXMgYW5kIGRyYXdzIHRoZSBpbWFnZSBvbiB0aGUgcm90YXRlZCBhbmdsZS5cbmZ1bmN0aW9uIHJvdGF0ZUltYWdlKGFuZ2xlLCB0cmFuc2xhdGVYcG9zLCB0cmFuc2xhdGVZcG9zLCBpbWFnZU9iaikge1xuICBkeW5hbWljQ29udGV4dC5zYXZlKCk7XG4gIGR5bmFtaWNDb250ZXh0LnRyYW5zbGF0ZSh0cmFuc2xhdGVYcG9zLCB0cmFuc2xhdGVZcG9zKTtcbiAgZHluYW1pY0NvbnRleHQucm90YXRlKGFuZ2xlKTtcbiAgZHluYW1pY0NvbnRleHQudHJhbnNsYXRlKC0odHJhbnNsYXRlWHBvcyksIC0gKHRyYW5zbGF0ZVlwb3MpKTtcbiAgZHluYW1pY0NvbnRleHQuZHJhd0ltYWdlKGltYWdlT2JqLmltYWdlLCBpbWFnZU9iai54UG9zLCBpbWFnZU9iai55UG9zKTtcbiAgZHluYW1pY0NvbnRleHQucmVzdG9yZSgpO1xuXG59XG5cbmltYWdlbG9hZE9ic2VydmVyID0gd2luZG93LnNldEludGVydmFsKGNoZWNrSWZsb2FkZWQsIDQwMCk7Il19
